package com.panmin.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.panmin.model.TaskCall;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_CALL".
*/
public class TaskCallDao extends AbstractDao<TaskCall, Long> {

    public static final String TABLENAME = "TASK_CALL";

    /**
     * Properties of entity TaskCall.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "id");
        public final static Property UserId = new Property(2, String.class, "userId", false, "userId");
        public final static Property Title = new Property(3, String.class, "title", false, "title");
        public final static Property Remarks = new Property(4, String.class, "remarks", false, "remarks");
        public final static Property RemindTime = new Property(5, long.class, "remindTime", false, "remindTime");
    };


    public TaskCallDao(DaoConfig config) {
        super(config);
    }
    
    public TaskCallDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_CALL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"id\" TEXT," + // 1: id
                "\"userId\" TEXT NOT NULL ," + // 2: userId
                "\"title\" TEXT," + // 3: title
                "\"remarks\" TEXT," + // 4: remarks
                "\"remindTime\" INTEGER NOT NULL );"); // 5: remindTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_CALL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskCall entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindString(3, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
        stmt.bindLong(6, entity.getRemindTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskCall entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindString(3, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
        stmt.bindLong(6, entity.getRemindTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskCall readEntity(Cursor cursor, int offset) {
        TaskCall entity = new TaskCall( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remarks
            cursor.getLong(offset + 5) // remindTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskCall entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemindTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskCall entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskCall entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
